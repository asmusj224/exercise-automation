// Code generated by sqlc. DO NOT EDIT.
// source: equipment.sql

package services

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEquipment = `-- name: CreateEquipment :one
INSERT INTO equipment (
    name
) VALUES (
  $1
) RETURNING id, created_at, updated_at, name
`

func (q *Queries) CreateEquipment(ctx context.Context, name sql.NullString) (Equipment, error) {
	row := q.db.QueryRowContext(ctx, createEquipment, name)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getEquipment = `-- name: GetEquipment :many
SELECT id, created_at, updated_at, name FROM equipment
`

func (q *Queries) GetEquipment(ctx context.Context) ([]Equipment, error) {
	rows, err := q.db.QueryContext(ctx, getEquipment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Equipment{}
	for rows.Next() {
		var i Equipment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEquipmentById = `-- name: GetEquipmentById :one
SELECT id, created_at, updated_at, name FROM equipment where id = $1
`

func (q *Queries) GetEquipmentById(ctx context.Context, id uuid.UUID) (Equipment, error) {
	row := q.db.QueryRowContext(ctx, getEquipmentById, id)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const updateEquipmentById = `-- name: UpdateEquipmentById :one
UPDATE equipment SET name = $1 WHERE id = $2 RETURNING id, created_at, updated_at, name
`

type UpdateEquipmentByIdParams struct {
	Name sql.NullString `json:"name"`
	ID   uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateEquipmentById(ctx context.Context, arg UpdateEquipmentByIdParams) (Equipment, error) {
	row := q.db.QueryRowContext(ctx, updateEquipmentById, arg.Name, arg.ID)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
