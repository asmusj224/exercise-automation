// Code generated by sqlc. DO NOT EDIT.
// source: exercise_workout.sql

package services

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createExerciseWorkout = `-- name: CreateExerciseWorkout :one
INSERT INTO exercise_workout (
    exercise_id,
    workout_id
) VALUES (
  $1, $2
) RETURNING id, created_at, updated_at, exercise_id, workout_id
`

type CreateExerciseWorkoutParams struct {
	ExerciseID uuid.UUID `json:"exercise_id"`
	WorkoutID  uuid.UUID `json:"workout_id"`
}

func (q *Queries) CreateExerciseWorkout(ctx context.Context, arg CreateExerciseWorkoutParams) (ExerciseWorkout, error) {
	row := q.db.QueryRowContext(ctx, createExerciseWorkout, arg.ExerciseID, arg.WorkoutID)
	var i ExerciseWorkout
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExerciseID,
		&i.WorkoutID,
	)
	return i, err
}

const getExerciseWorkoutById = `-- name: GetExerciseWorkoutById :one
SELECT id, created_at, updated_at, exercise_id, workout_id from exercise_workout where id = $1
`

func (q *Queries) GetExerciseWorkoutById(ctx context.Context, id uuid.UUID) (ExerciseWorkout, error) {
	row := q.db.QueryRowContext(ctx, getExerciseWorkoutById, id)
	var i ExerciseWorkout
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExerciseID,
		&i.WorkoutID,
	)
	return i, err
}

const getExerciseWorkoutByWorkoutId = `-- name: GetExerciseWorkoutByWorkoutId :one
SELECT w.id, w.name, w.split , t.exercises
FROM   workout      w
JOIN  ( 
   SELECT ew.workout_id AS id, array_to_json(array_agg(e.*)) AS exercises
   FROM   exercise_workout ew
   JOIN   exercise       e  ON e.id = ew.exercise_id
   GROUP  BY ew.workout_id
   ) t USING (id) WHERE w.id = $1
`

type GetExerciseWorkoutByWorkoutIdRow struct {
	ID        uuid.UUID       `json:"id"`
	Name      string          `json:"name"`
	Split     WorkoutSplit    `json:"split"`
	Exercises json.RawMessage `json:"exercises"`
}

func (q *Queries) GetExerciseWorkoutByWorkoutId(ctx context.Context, id uuid.UUID) (GetExerciseWorkoutByWorkoutIdRow, error) {
	row := q.db.QueryRowContext(ctx, getExerciseWorkoutByWorkoutId, id)
	var i GetExerciseWorkoutByWorkoutIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Split,
		&i.Exercises,
	)
	return i, err
}

const updateExerciseWorkoutById = `-- name: UpdateExerciseWorkoutById :one
UPDATE exercise_workout SET exercise_id = $1, workout_id = $2 WHERE id = $3 RETURNING id, created_at, updated_at, exercise_id, workout_id
`

type UpdateExerciseWorkoutByIdParams struct {
	ExerciseID uuid.UUID `json:"exercise_id"`
	WorkoutID  uuid.UUID `json:"workout_id"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) UpdateExerciseWorkoutById(ctx context.Context, arg UpdateExerciseWorkoutByIdParams) (ExerciseWorkout, error) {
	row := q.db.QueryRowContext(ctx, updateExerciseWorkoutById, arg.ExerciseID, arg.WorkoutID, arg.ID)
	var i ExerciseWorkout
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExerciseID,
		&i.WorkoutID,
	)
	return i, err
}
